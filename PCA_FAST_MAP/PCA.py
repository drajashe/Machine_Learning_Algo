#Deepti_Rajashekharaiah_Siddagangappaimport numpy as npfrom matplotlib import pyplot as pltXdata = np.loadtxt("pca-data.txt", delimiter='\t')m, n = Xdata.shape#print Xdatafig, ax = plt.subplots(figsize=(12,12))ax.scatter(Xdata[:, 0], Xdata[:, 1])Mu=[]#MEANMu = np.mean(Xdata, axis=0)print Mu#compute covariancecov_mat = np.cov(Xdata.T)#can use even this formula#cov_mat = (Xdata - Mu).T.dot((Xdata - Mu)) / (Xdata.shape[0]-1)#print('Covariance matrix \n%s' %cov_mat)print cov_mateig_vals, eig_vecs = np.linalg.eig(cov_mat)print('Eigenvectors \n%s' %eig_vecs)print('\nEigenvalues \n%s' %eig_vals)# Make a list of (eigenvalue, eigenvector) tupleseig_pairs = [(np.abs(eig_vals[i]), eig_vecs[:,i]) for i in range(len(eig_vals))]print eig_pairs# Sort the (eigenvalue, eigenvector) tuples from high to loweig_pairs.sort(key=lambda x: x[0], reverse=True)# Visually confirm that the list is correctly sorted by decreasing eigenvaluesprint('Eigenvalues in descending order:')for i in eig_pairs:    print(i[0])print len(eig_pairs)matrix_w = np.hstack((eig_pairs[0][1].reshape(3,1),                      eig_pairs[1][1].reshape(3,1)))print('Matrix W:\n', matrix_w)Y = Xdata.dot(matrix_w)print Ynp.savetxt("2D_Data.txt",Y)Pca_out = open("PCA_out.txt", "w")for i in range(len(Y)):	Pca_out.write("%f, %f\n" %(Y[i][0], Y[i][1]))Pca_out.close()