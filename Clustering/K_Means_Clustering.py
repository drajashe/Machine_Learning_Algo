import numpy as npimport pandas as pdimport randomimport osfrom sklearn.cluster import KMeans# Calculates euclidean distance between# a data point and all the available cluster# centroids.def compute_euclidean_distance(point, centroid):    return np.sqrt(np.sum((point - centroid)**2))def create_centroids():    centroids = []    centroids.append([-4.0, 0.0])    centroids.append([0.0, 4.0])    centroids.append([4.0, 12.0])    return np.array(centroids)def main():    # The K in k-means. How many clusters do we assume exist?    num_clusters = 3    data = pd.read_csv('clusters.txt', header = None)    X = data #returns a numpy array    print  X    # kmeans clustering algorithm    # data = set of data points    # k = number of clusters    k = 3    # To store the value of centroids when it updates    C_old = np.zeros(C.shape)    # Cluster Lables(0, 1, 2)    clusters = np.zeros(len(X))    # Error func. - Distance between new centroids and old centroids    error = compute_euclidean_distance(C, C_old, None)    # Loop will run till the error becomes zero    while error != 0:        # Assigning each value to its closest cluster        for i in range(len(X)):            distances = dist(X[i], C)            cluster = np.argmin(distances)            clusters[i] = cluster        # Storing the old centroid values        C_old = deepcopy(C)        # Finding the new centroids by taking the average value        for i in range(k):            points = [X[j] for j in range(len(X)) if clusters[j] == i]            C[i] = np.mean(points, axis=0)        error = dist(C, C_old, None)